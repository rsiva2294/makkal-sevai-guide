import 'dart:async';
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart'; // For rootBundle
import 'package:makkal_sevai_guide/model/service_info.dart';
import 'package:makkal_sevai_guide/screen/main_scaffold.dart';
import 'package:makkal_sevai_guide/widget/app_drawer.dart';
import 'package:makkal_sevai_guide/widget/service_detail_card.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:upgrader/upgrader.dart';

// Firebase imports
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:firebase_crashlytics/firebase_crashlytics.dart';
import 'package:flutter/foundation.dart' show kReleaseMode, Uint8List, PlatformDispatcher; // Import Uint8List and kReleaseMode

// IMPORTANT: This file is generated by `flutterfire configure` and is unique to your project.
// Ensure you have run `flutterfire configure` successfully.
import 'firebase_options.dart';


// Entry point of the Flutter application.
void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Ensure Flutter binding is initialized

  // Initialize Firebase App
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // --- Configure Firebase Analytics Collection ---
  // Analytics collection is enabled only in release mode for production data.
  // It's disabled in debug/profile mode to prevent skewing production data.
  if (kReleaseMode) {
    await FirebaseAnalytics.instance.setAnalyticsCollectionEnabled(true);
    debugPrint('Firebase Analytics Collection Enabled (Release Mode)');
  } else {
    await FirebaseAnalytics.instance.setAnalyticsCollectionEnabled(false);
    debugPrint('Firebase Analytics Collection Disabled (Debug/Profile Mode)');
  }

  // --- Unified Error Handling with PlatformDispatcher.instance.onError ---
  // This captures all uncaught errors and exceptions that originate from the platform dispatcher,
  // effectively handling both Flutter framework errors and unhandled Dart errors.
  PlatformDispatcher.instance.onError = (error, stack) {
    FirebaseCrashlytics.instance.recordError(error, stack, fatal: true);
    debugPrint('Caught error by PlatformDispatcher.instance.onError: $error'); // For local debugging
    return true; // Return true to indicate that the error has been handled.
  };

  // Optionally, you can still use FlutterError.onError for direct Flutter framework errors,
  // though PlatformDispatcher.instance.onError is often sufficient.
  FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterFatalError;

  // Run the application
  runApp(const ServiceFinderApp());

  // Note: runZonedGuarded is often redundant when PlatformDispatcher.instance.onError is used,
  // as the latter provides comprehensive top-level error handling.
}

// The root widget of the application, managing the theme.
class ServiceFinderApp extends StatefulWidget {
  const ServiceFinderApp({super.key});

  @override
  State<ServiceFinderApp> createState() => _ServiceFinderAppState();
}

class _ServiceFinderAppState extends State<ServiceFinderApp> {
  ThemeMode _themeMode = ThemeMode.system;

  // Create an Analytics instance and Observer for automatic screen tracking
  static FirebaseAnalytics analytics = FirebaseAnalytics.instance;
  static FirebaseAnalyticsObserver observer =
  FirebaseAnalyticsObserver(analytics: analytics);

  void _toggleTheme(ThemeMode themeMode) {
    setState(() {
      _themeMode = themeMode;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Makkal Sevai Guide',
      theme: ThemeData(
        useMaterial3: true,
        brightness: Brightness.light,
        colorSchemeSeed: Colors.blueGrey,
      ),
      darkTheme: ThemeData(
        useMaterial3: true,
        brightness: Brightness.dark,
        colorSchemeSeed: Colors.blueGrey,
      ),
      themeMode: _themeMode,
      home: MainScreen(
        onThemeChanged: _toggleTheme,
      ),
      debugShowCheckedModeBanner: false,
      // Add the observer here for automatic screen tracking
      navigatorObservers: [observer],
    );
  }
}